name: CI/CD for Payments Service
on:
  push:
    branches:
      - main
    paths:
      - teacup-loan-payments/


env:
  AWS_REGION: ap-southeast-1
  REPOSITORY_PAYMENTS: teacup-payments
  SERVICE_PAYMENTS: teacup-payments
  ECS_CLUSTER: teacup-system
  TASK_PAYMENTS: .aws/task-definition-payments.json
  CONTAINER_PAYMENTS: teacup-payments

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Run tests on payments service
        run: cd teacup-loan-payments && chmod +x ./gradlew && ./gradlew test && cd ..
  build:
    name: Build for payments service
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_PAYMENTS }}
        run: cd teacup-loan-payments && ./gradlew build sonarqube --info && cd ..
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          path: teacup-loan-payments/build/libs/*.jar
          name: payments-app

  deploy:
    name: Deploy Payments Service
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get previous payments service build
        uses: actions/download-artifact@v2
        with:
          name: payments-app
          path: teacup-loan-payments/


      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        working-directory: teacup-loan-payments/
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY_PAYMENTS:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$REPOSITORY_PAYMENTS:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$REPOSITORY_PAYMENTS:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_PAYMENTS }}
          container-name: ${{ env.CONTAINER_PAYMENTS }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_PAYMENTS }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true